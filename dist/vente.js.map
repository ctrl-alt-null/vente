{"version":3,"file":"vente.js","sources":["../src/vente.ts"],"sourcesContent":["/***\r\n * Returns a `Promise` that resolves after waiting requested time.\r\n * @param milliseconds Wait duration.\r\n * @returns {Promise<any>}\r\n */\r\nexport const wait = (milliseconds: number): Promise<void> =>\r\n  new Promise((resolve) => setTimeout(resolve, milliseconds))\r\n\r\ntype PendingPromise = {\r\n  /** The Promise itself. */\r\n  promise: Promise<any>\r\n  /** Resolves the Promise. */\r\n  resolve: () => void\r\n  /** Rejects the Promise. */\r\n  reject: () => void\r\n}\r\n\r\n/***\r\n * Returns a `Promise` that does not resolve/reject until either hook is manually called.\r\n * @returns {PendingPromise} A wrapped object with access to the Promise itself, and the resolver and rejecter functions.\r\n */\r\nexport const pending = (): PendingPromise => {\r\n  let resolve: () => void, reject: () => void\r\n\r\n  const promise = new Promise((res, rej) => {\r\n    resolve = res\r\n    reject = rej\r\n  })\r\n\r\n  return {\r\n    promise,\r\n    resolve,\r\n    reject,\r\n  }\r\n}\r\n"],"names":["resolve","reject","promise","Promise","res","rej","milliseconds","setTimeout"],"mappings":"gBAqBuB,WACrB,IAAIA,EAAqBC,EAOzB,MAAO,CACLC,QANc,IAAIC,QAAQ,SAACC,EAAKC,GAChCL,EAAUI,EACVH,EAASI,IAKTL,QAAAA,EACAC,OAAAA,iBA3BgB,SAACK,cACfH,QAAQ,SAACH,UAAYO,WAAWP,EAASM"}