{"version":3,"file":"vente.modern.js","sources":["../src/vente.ts"],"sourcesContent":["/***\r\n * Returns a `Promise` that resolves after waiting requested time.\r\n * @param milliseconds Wait duration.\r\n * @returns {Promise<any>}\r\n */\r\nexport const wait = (milliseconds: number): Promise<void> =>\r\n  new Promise((resolve) => setTimeout(resolve, milliseconds))\r\n\r\ntype PendingPromise = {\r\n  /** The Promise itself. */\r\n  promise: Promise<any>\r\n  /** Resolves the Promise. */\r\n  resolve: () => void\r\n  /** Rejects the Promise. */\r\n  reject: () => void\r\n}\r\n\r\n/***\r\n * Returns a `Promise` that does not resolve/reject until either hook is manually called.\r\n * @returns {PendingPromise} A wrapped object with access to the Promise itself, and the resolver and rejecter functions.\r\n */\r\nexport const pending = (): PendingPromise => {\r\n  let resolve: () => void = () => {},\r\n    reject: () => void = () => {}\r\n\r\n  const promise = new Promise((res, rej) => {\r\n    resolve = res\r\n    reject = rej\r\n  })\r\n\r\n  return {\r\n    promise,\r\n    resolve,\r\n    reject,\r\n  }\r\n}\r\n"],"names":["wait","milliseconds","Promise","resolve","setTimeout","pending","reject","promise","res","rej"],"mappings":"AAKaA,MAAAA,EAAQC,GACnB,IAAIC,QAASC,GAAYC,WAAWD,EAASF,IAelCI,EAAU,KACrB,IAAIF,EAAsB,OACxBG,EAAqB,OAOvB,MAAO,CACLC,QANc,IAAIL,QAAQ,CAACM,EAAKC,KAChCN,EAAUK,EACVF,EAASG,IAKTN,QAAAA,EACAG,OAAAA"}